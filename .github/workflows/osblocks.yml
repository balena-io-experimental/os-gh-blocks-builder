name: 'Build and deploy an OS block'

on:
  workflow_call:
    inputs:
      block-name:
        required: true
        type: string
      device-repository:
        required: true
        type: string
      device-type:
        required: true
        type: string
      deployTo:
        required: true
        type: choice
        options:
          - production
          - staging
      final:
        type: choice
        options:
          - yes
          - no
jobs:
  fetch:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.set-tag.outputs.tag }}
      status: ${{ join(steps.*.conclusion) }}
    steps:
      - uses: actions/checkout@v3

      - name: Clone device repository
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.device-repository }}
          path: .
          token: ${{ secrets.GITHUB_TOKEN }}
          recursive: true

      - name: 'Only run for device repositories'
        id: assert-device-repository
        run: |
          if [ -f "$(pwd)/repo.yml" ]; then
            if grep -q "yocto-based OS image" repo.yml; then
              exit 0
            fi
          fi
          exit 1

      - name: 'Update local tags'
        id: update-tags
        run: git fetch --tags -f

      - name: 'Fetch latest tag'
        id: get-latest-tag
        uses: "actions-ecosystem/action-get-latest-tag@v1"

      - name: 'Set tag'
        id: set-tag
        run: echo "::set-output name=tag::${{ steps.get-latest-tag.outputs.tag }}"

  build:
    needs: fetch
    if: contains(needs.fetch.outputs.status, 'success')
    runs-on: ubuntu-latest
    steps:
      - name: manifest
        id: get-package-list
        if: ${{ steps.get-latest-tag.outputs.tag != null }}
        run: |
          echo "Fetching package manifest"
          include_dir="$(pwd)/balena-yocto-scripts/automation/include/"
          source "${include_dir}/balena-api.inc"
          source "${include_dir}/balena-lib.inc"
          tmpfile=$(mktemp)
          $(balena_lib_contract_fetch_composedOf_list ${{ inputs.block-name }} ${{ inputs.device-type }} ${{ steps.get-latest-tag.outputs.tag }} "sw.recipe.yocto") | sponge "${tmpfile}"
          echo "::set-output name=packages::$(cat ${tmpfile})"
          rm "${tmpfile}"

      - name: build
        run: |
          echo "Building" ${{ inputs.device-type }}
          mkdir shared-dir
          ./balena-yocto-scripts/build/balena-build.sh -d ${{ inputs.device-type }} -a ${{ inputs.environment }} -s ./shared-dir  -i ${{ steps.get-package-list.outputs.packages }}
      -name: deploy
       run: |
         echo "Deploying " ${{ inputs.device-type }} " to " ${{ inputs.environment }} " with final " ${{ inputs.final }}

